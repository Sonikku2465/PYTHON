MVP — это продукт, обладающий минимальными, но достаточными для удовлетворения первых потребителей функциями. 
Основная задача — получение обратной связи для формирования гипотез дальнейшего развития продукта.
MVC расшифровывается как Model-view-controller, а дословно перевести можно как Модель-Представление-Контроллер.
Модель используется повсеместно для разработки информационных систем и Интернет сайтов, приложений.
Отличия:
MVP:Данный подход позволяет создавать абстракцию представления. Для этого необходимо выделить интерфейс представления с определенным набором свойств и методов. Презентер, в свою очередь, получает ссылку на реализацию интерфейса, подписывается на события представления и по запросу изменяет модель.
Признаки презентера:
Двухсторонняя коммуникация с представлением;
Представление взаимодействует напрямую с презентером, путем вызова соответствующих функций или событий экземпляра презентера;
Презентер взаимодействует с View путем использования специального интерфейса, реализованного представлением;
Один экземпляр презентера связан с одним отображением.
Реализация:
Каждое представление должно реализовывать соответствующий интерфейс. Интерфейс представления определяет набор функций и событий, необходимых для взаимодействия с пользователем. Презентер должен иметь ссылку на реализацию соответствующего интерфейса, которую обычно передают в конструкторе.
Логика представления должна иметь ссылку на экземпляр презентера. Все события представления передаются для обработки в презентер и практически никогда не обрабатываются логикой представления.

MVC:Основная идея этого паттерна в том, что и контроллер и представление зависят от модели, но модель никак не зависит от этих двух компонент.

Признаки контроллера
Контроллер определяет, какие представление должно быть отображено в данный момент;
События представления могут повлиять только на контроллер.контроллер может повлиять на модель и определить другое представление.
Возможно несколько представлений только для одного контроллера;
Реализация:
Контроллер перехватывает событие извне и в соответствии с заложенной в него логикой, реагирует на это событие изменяя Mодель, посредством вызова соответствующего метода. После изменения Модель использует событие о том что она изменилась, и все подписанные на это события Представления, получив его, обращаются к Модели за обновленными данными, после чего их и отображают.

MVP - Используется в ситуации, когда невозможно связывание данных;
Частым примером может быть использование Windows Forms.
MVC - Используется в ситуации, когда связь между представление и другими частями приложения невозможна;
Частым примером использования может служить ASP.NET MVC.